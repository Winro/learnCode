
git 学习笔记

基本说明

	1、安装git
	2、指定文件夹，右键选择[git bash here]
	
	
各区域说明
	key words explain：
		1、workspace:工作区
		2、stage：暂存区
		3、repository:版本仓库
		4、HEAD：表示当前版本，最新提交至 repository 版本号  commit id（例：b1027632058e3a02f4e8f6979dc5fe2898647229）

	作业流程：
	
	1、创建版本库:
	
		git init[见指令说明]
	
	2、正常提交流程：
	
		workspace[工作区] ---（code:git add <file/文件夹>）--->  stage[暂存区]  ---(code:git commit -m "some message")--->  repository[版本仓库]
	
	3、版本回退:
	
		git reset[见指令说明]
	
	4、撤销修改：
		
		git checkout[见指令说明]，配套使用git reset HEAD [见指令说明]
		
	5、删除文件：
		
		
		
	思考：
	1、
		第一次修改 -> git add -> 第二次修改 -> git commit
		结果：repository 中存放 第一次修改，workspace 为 第二次修改
	2、
		第一次修改 -> git add -> 第二次修改 -> git add -> git commit
		结果：repository 中存放 第二次修改，workspace 为 第二次修改
		
	多人协作的工作模式通常是这样：

			首先，可以试图用git push origin <branch-name>推送自己的修改；

			如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

			如果合并有冲突，则解决冲突，并在本地提交；

			没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

			如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

			这就是多人协作的工作模式，一旦熟悉了，就非常简单。		
		
	
指令说明 
1、git init：
			功能说明：指定 位置创建repository[版本仓库]，当前文件夹下边出现文件夹 .git。
			语法：[  git init  ];
			
2、git status：
			功能说明：确认当前仓库状态。
			语法：[  git status  ];
			
3、git diff：
			功能说明：比较 workspace 与 repository 之间的差异。
			语法：
				正常:[  git diff <file>  ];
				可以查看工作区和版本库里面最新版本的区别:[  git diff HEAD -- <file>  ];

4、git log：
			功能说明：显示从最近到最远的提交日志。
			语法：
				多行显示:[  git log  ] ;
				单行显示:[  git log --pretty=oneline  ];
				查看分支合并图：[  git log --graph  ];

5、git reflog：
			功能说明：显示命令日志。
			语法：[  git reflog  ];

6、git reset：
			功能说明：返回版本号
			语法：
				返回上一版本：[  git reset --hard HEAD^  ];
				返回指定版本：[  git reset --hard <commit id>],例([  git reset --hard b1027  ]);
				
			详细说明：
					HEAD:为指针。
					
					HEAD
					|
					|-----> 版本：版本3
							版本：版本2
							版本：版本1
				
				命令:[  git reset --hard HEAD^  ]
				
					HEAD
					|
					|       版本：版本3
					|-----> 版本：版本2
							版本：版本1

7、git checkout:
			1、功能说明：
					1、撤销修改，stage 中丢弃工作区的修改；
					2、撤销删除
					
					语法：[  git checkout -- <file>  ]
				
			2、功能说明：
					1、选择分支
						
					语法：[  git checkout <branch name>  ]
					
					2、创建并选择分支
						
					语法：[  git checkout -b <branch name>  ]
						
						
				
				撤销类使用说明：
						文件修改 
						1、[  未提交 git add 状态  ]：
							使用 [  git status  ],显示当前修改文件未提交至stage
							使用 [  git checkout  ] ,可以退回至保存前
							使用 [  git status  ],显示当前分支内已无需提交至stage文件，也就是说，原文件被返回至保存前
							
						2、[  已提交 git add 状态  ]：
							使用 [  git status  ],显示当前修改文件已提交至stage
							使用 [  git checkout  ] ,无法退回至git add前
							使用 [  git status  ],显示当前分支内当前修改文件已提交至stage
							
							需要使用[  git reset HEAD <file>  ] 修改撤销掉（unstage），重新放回工作区
							
						场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

						场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

						场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
							
8、git remote：
			功能说明：连接远程仓库
			语法：[ git remote add origin git@github.com:Winro/learnCode.git ]

9、git push：
			功能说明：推送至远程仓库
			语法：[  git push -u origin <branch-name>  ]

10、git clone:
			功能说明：从远程仓库下拉至本地
			语法：[  git clone git@github.com:Winro/learnCode.git  ]
				
11、git branch:
			功能说明：
				1、创建分支
				
				语法：[  git branch  <branch name>  ]
				
				2、查看现有分支，以及目前指向分支
				
				语法：[  git branch  ]
				
				3、删除分支
				
				语法：[  git branch -d <branch name>  ]
				
				4、强行删除分支：删除未合并的分支
				
				语法：[  git branch -D <branch name>  ]
12、git merge:
			功能说明：
				将当前指向的分支  与  指向目标分支  进行合并
			语法：
			
			快速模式：[  git merge <branch name>  ]
					说明：删除分支后无历史
			正常模式：[  git merge --no-ff -m "message" <branch name>  ]
					说明：删除分支后有历史
		
13、git remote -v:
			功能说明：查看远程仓库信息
				
				
				

